function S = filehandler(S,step)

% save directory principle:
% 1. creates directory fullfile(S.path.(S.func),S.(S.func).save.suffix{:})
% - THIS SHOULD BE HANDLED BY THE CALLING FUNCTION INSTEAD?
% 2. by default, save S to S.path.(S.func), unless S.(S.func).save.dir{:}
    % is defined, in which case saves to that subdirectory within S.path.(S.func)
% 3. output table saves to fullfile(S.path.(S.func),S.(S.func).save.dir{:})
    % unless specified by S.(S.func).outtable_dir

% BETTER:
% loading: always specify loaddir and suffix - latter only relates to
% filenames. Can specific suffix first so it can be used in settings to
% specifiy load.dir.
% saving: always specify save suffix first, then save.dir for data, then
% savedirS for S, and also for table

% FUNCTION:
% creates save.dir for data and for S.

% now requires:
% S.(S.func).load.dir
% S.(S.func).save.dir
% S.(S.func).save.dir_S
% S.(S.func).save.dir_outtable

switch step
    case 'start'

%         % create directory for saving if doesn't exist
%         if isfield(S.(S.func),'save')
%             if ~exist(fullfile(S.path.(S.func),S.(S.func).save.suffix{:}),'dir')
%                 mkdir(fullfile(S.path.(S.func),S.(S.func).save.suffix{:}));
%             end
%         end
        % create directories for saving if doesn't exist
        if isfield(S.(S.func),'save') && isfield(S.(S.func).save,'dir')
            if ~exist(fullfile(S.(S.func).save.dir),'dir')
                mkdir(fullfile(S.path.(S.func),S.(S.func).save.suffix{:}));
            end
        end

        % load directory
        if isfield(S.(S.func),'loaddir')
            S.path.file = S.(S.func).loaddir;
        else
            S.path.file = fullfile(S.path.(S.func),S.(S.func).load.suffix{:});
        end
        
        % get previously processed files
        if isfield(S.(S.func),'designtab')
            if S.(S.func).overwrite==0
                prev_designtab = S.(S.func).designtab;
            end
            S.(S.func) = rmfield(S.(S.func),'designtab');
        end
        
        % GET DESIGNTAB, INCLUDING FILE LIST
        S = getfilelist(S,S.(S.func).load.suffix);
        
        % update designtab with those already processed and generate
        % filelist to process
        if S.(S.func).overwrite==0 && exist('prev_designtab','var')
            idx_processed = ismember(S.(S.func).designtab.file,prev_designtab.file(prev_designtab.processed==1));
            S.(S.func).designtab.processed(idx_processed)=1;
            S.(S.func).filelist = S.(S.func).designtab.file(~idx_processed);
        else
            S.(S.func).filelist = S.(S.func).designtab.file;
        end
        
        %S.loadpath = S.path.file;
        
        % setup output table if needed
        if ~isfield(S.(S.func),'outtable') || S.(S.func).overwrite==1
            S.(S.func).outtable = table;
        end
        S.fn = height(S.(S.func).outtable);

    case 'update'
        idx_processed = ismember(S.(S.func).designtab.file,S.(S.func).file_processed);
        S.(S.func).designtab.processed(idx_processed)=1;

        % save S
        if ~isfield(S.(S.func),'save') || ~isfield(S.(S.func).save,'dir')
            S.(S.func).save.dir{:} = '';
        end
        out_dir = fullfile(S.path.(S.func),S.(S.func).save.dir{:});
        save(fullfile(out_dir,S.sname),'S'); % saves 'S' - will be overwritten each time

        % save table
        if isfield(S.(S.func),'outtable_name')
            if isfield(S.(S.func),'outtable_dir')
                outtable_dir = S.(S.func).outtable_dir;
            else
                outtable_dir = fullfile(S.path.(S.func),S.(S.func).save.dir{:});
            end
            writetable(S.(S.func).outtable,fullfile(outtable_dir,S.(S.func).outtable_name))
        end

%         if exist('prev_filelist','var')
%             S.(S.func).filelist = [S.(S.func).filelist prev_filelist];
%             S.(S.func).dirlist = [S.(S.func).dirlist prev_dirlist];
%             S.(S.func).subj_pdat_idx = [S.(S.func).subj_pdat_idx prev_subj_pdat_idx];
%             S.(S.func).designtab = [S.(S.func).designtab; prev_designtab];
%         end

end
